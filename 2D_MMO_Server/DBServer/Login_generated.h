// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LOGIN_H_
#define FLATBUFFERS_GENERATED_LOGIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 12 &&
              FLATBUFFERS_VERSION_REVISION == 23,
             "Non-compatible flatbuffers version included");

struct C_SIGNUP;
struct C_SIGNUPBuilder;

struct SD_SIGNUP;
struct SD_SIGNUPBuilder;

struct D_SIGNUP;
struct D_SIGNUPBuilder;

struct SC_SIGNUP;
struct SC_SIGNUPBuilder;

struct C_SIGNIN;
struct C_SIGNINBuilder;

struct SD_SIGNIN;
struct SD_SIGNINBuilder;

struct D_SIGNIN;
struct D_SIGNINBuilder;

struct SC_SIGNIN;
struct SC_SIGNINBuilder;

enum SignUpError : uint8_t {
  SignUpError_SUCCESS = 0,
  SignUpError_OVERLAP_ID = 1,
  SignUpError_UNKNOWN = 2,
  SignUpError_MIN = SignUpError_SUCCESS,
  SignUpError_MAX = SignUpError_UNKNOWN
};

inline const SignUpError (&EnumValuesSignUpError())[3] {
  static const SignUpError values[] = {
    SignUpError_SUCCESS,
    SignUpError_OVERLAP_ID,
    SignUpError_UNKNOWN
  };
  return values;
}

inline const char * const *EnumNamesSignUpError() {
  static const char * const names[4] = {
    "SUCCESS",
    "OVERLAP_ID",
    "UNKNOWN",
    nullptr
  };
  return names;
}

inline const char *EnumNameSignUpError(SignUpError e) {
  if (::flatbuffers::IsOutRange(e, SignUpError_SUCCESS, SignUpError_UNKNOWN)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSignUpError()[index];
}

enum SignInError : uint8_t {
  SignInError_SUCCESS = 0,
  SignInError_INVALID_ID = 1,
  SignInError_INVALID_PASSWORD = 2,
  SignInError_UNKNOWN = 3,
  SignInError_MIN = SignInError_SUCCESS,
  SignInError_MAX = SignInError_UNKNOWN
};

inline const SignInError (&EnumValuesSignInError())[4] {
  static const SignInError values[] = {
    SignInError_SUCCESS,
    SignInError_INVALID_ID,
    SignInError_INVALID_PASSWORD,
    SignInError_UNKNOWN
  };
  return values;
}

inline const char * const *EnumNamesSignInError() {
  static const char * const names[5] = {
    "SUCCESS",
    "INVALID_ID",
    "INVALID_PASSWORD",
    "UNKNOWN",
    nullptr
  };
  return names;
}

inline const char *EnumNameSignInError(SignInError e) {
  if (::flatbuffers::IsOutRange(e, SignInError_SUCCESS, SignInError_UNKNOWN)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSignInError()[index];
}

struct C_SIGNUP FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C_SIGNUPBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_PASSWORD = 6
  };
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  const ::flatbuffers::String *password() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PASSWORD);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_PASSWORD) &&
           verifier.VerifyString(password()) &&
           verifier.EndTable();
  }
};

struct C_SIGNUPBuilder {
  typedef C_SIGNUP Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(C_SIGNUP::VT_ID, id);
  }
  void add_password(::flatbuffers::Offset<::flatbuffers::String> password) {
    fbb_.AddOffset(C_SIGNUP::VT_PASSWORD, password);
  }
  explicit C_SIGNUPBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C_SIGNUP> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C_SIGNUP>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C_SIGNUP> CreateC_SIGNUP(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> password = 0) {
  C_SIGNUPBuilder builder_(_fbb);
  builder_.add_password(password);
  builder_.add_id(id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<C_SIGNUP> CreateC_SIGNUPDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *password = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto password__ = password ? _fbb.CreateString(password) : 0;
  return CreateC_SIGNUP(
      _fbb,
      id__,
      password__);
}

struct SD_SIGNUP FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SD_SIGNUPBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SESSION_ID = 4,
    VT_ID = 6,
    VT_PASSWORD = 8
  };
  uint64_t session_id() const {
    return GetField<uint64_t>(VT_SESSION_ID, 0);
  }
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  const ::flatbuffers::String *password() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PASSWORD);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_SESSION_ID, 8) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_PASSWORD) &&
           verifier.VerifyString(password()) &&
           verifier.EndTable();
  }
};

struct SD_SIGNUPBuilder {
  typedef SD_SIGNUP Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_session_id(uint64_t session_id) {
    fbb_.AddElement<uint64_t>(SD_SIGNUP::VT_SESSION_ID, session_id, 0);
  }
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(SD_SIGNUP::VT_ID, id);
  }
  void add_password(::flatbuffers::Offset<::flatbuffers::String> password) {
    fbb_.AddOffset(SD_SIGNUP::VT_PASSWORD, password);
  }
  explicit SD_SIGNUPBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SD_SIGNUP> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SD_SIGNUP>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SD_SIGNUP> CreateSD_SIGNUP(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t session_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> password = 0) {
  SD_SIGNUPBuilder builder_(_fbb);
  builder_.add_session_id(session_id);
  builder_.add_password(password);
  builder_.add_id(id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SD_SIGNUP> CreateSD_SIGNUPDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t session_id = 0,
    const char *id = nullptr,
    const char *password = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto password__ = password ? _fbb.CreateString(password) : 0;
  return CreateSD_SIGNUP(
      _fbb,
      session_id,
      id__,
      password__);
}

struct D_SIGNUP FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef D_SIGNUPBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DB_ID = 4,
    VT_SESSION_ID = 6,
    VT_OK = 8
  };
  uint64_t db_id() const {
    return GetField<uint64_t>(VT_DB_ID, 0);
  }
  uint64_t session_id() const {
    return GetField<uint64_t>(VT_SESSION_ID, 0);
  }
  SignUpError ok() const {
    return static_cast<SignUpError>(GetField<uint8_t>(VT_OK, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_DB_ID, 8) &&
           VerifyField<uint64_t>(verifier, VT_SESSION_ID, 8) &&
           VerifyField<uint8_t>(verifier, VT_OK, 1) &&
           verifier.EndTable();
  }
};

struct D_SIGNUPBuilder {
  typedef D_SIGNUP Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_db_id(uint64_t db_id) {
    fbb_.AddElement<uint64_t>(D_SIGNUP::VT_DB_ID, db_id, 0);
  }
  void add_session_id(uint64_t session_id) {
    fbb_.AddElement<uint64_t>(D_SIGNUP::VT_SESSION_ID, session_id, 0);
  }
  void add_ok(SignUpError ok) {
    fbb_.AddElement<uint8_t>(D_SIGNUP::VT_OK, static_cast<uint8_t>(ok), 0);
  }
  explicit D_SIGNUPBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<D_SIGNUP> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<D_SIGNUP>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<D_SIGNUP> CreateD_SIGNUP(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t db_id = 0,
    uint64_t session_id = 0,
    SignUpError ok = SignUpError_SUCCESS) {
  D_SIGNUPBuilder builder_(_fbb);
  builder_.add_session_id(session_id);
  builder_.add_db_id(db_id);
  builder_.add_ok(ok);
  return builder_.Finish();
}

struct SC_SIGNUP FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SC_SIGNUPBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OK = 4
  };
  SignUpError ok() const {
    return static_cast<SignUpError>(GetField<uint8_t>(VT_OK, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_OK, 1) &&
           verifier.EndTable();
  }
};

struct SC_SIGNUPBuilder {
  typedef SC_SIGNUP Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_ok(SignUpError ok) {
    fbb_.AddElement<uint8_t>(SC_SIGNUP::VT_OK, static_cast<uint8_t>(ok), 0);
  }
  explicit SC_SIGNUPBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SC_SIGNUP> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SC_SIGNUP>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SC_SIGNUP> CreateSC_SIGNUP(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    SignUpError ok = SignUpError_SUCCESS) {
  SC_SIGNUPBuilder builder_(_fbb);
  builder_.add_ok(ok);
  return builder_.Finish();
}

struct C_SIGNIN FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C_SIGNINBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_PASSWORD = 6
  };
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  const ::flatbuffers::String *password() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PASSWORD);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_PASSWORD) &&
           verifier.VerifyString(password()) &&
           verifier.EndTable();
  }
};

struct C_SIGNINBuilder {
  typedef C_SIGNIN Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(C_SIGNIN::VT_ID, id);
  }
  void add_password(::flatbuffers::Offset<::flatbuffers::String> password) {
    fbb_.AddOffset(C_SIGNIN::VT_PASSWORD, password);
  }
  explicit C_SIGNINBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C_SIGNIN> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C_SIGNIN>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C_SIGNIN> CreateC_SIGNIN(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> password = 0) {
  C_SIGNINBuilder builder_(_fbb);
  builder_.add_password(password);
  builder_.add_id(id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<C_SIGNIN> CreateC_SIGNINDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *password = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto password__ = password ? _fbb.CreateString(password) : 0;
  return CreateC_SIGNIN(
      _fbb,
      id__,
      password__);
}

struct SD_SIGNIN FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SD_SIGNINBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SESSION_ID = 4,
    VT_ID = 6,
    VT_PASSWORD = 8
  };
  uint64_t session_id() const {
    return GetField<uint64_t>(VT_SESSION_ID, 0);
  }
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  const ::flatbuffers::String *password() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PASSWORD);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_SESSION_ID, 8) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_PASSWORD) &&
           verifier.VerifyString(password()) &&
           verifier.EndTable();
  }
};

struct SD_SIGNINBuilder {
  typedef SD_SIGNIN Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_session_id(uint64_t session_id) {
    fbb_.AddElement<uint64_t>(SD_SIGNIN::VT_SESSION_ID, session_id, 0);
  }
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(SD_SIGNIN::VT_ID, id);
  }
  void add_password(::flatbuffers::Offset<::flatbuffers::String> password) {
    fbb_.AddOffset(SD_SIGNIN::VT_PASSWORD, password);
  }
  explicit SD_SIGNINBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SD_SIGNIN> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SD_SIGNIN>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SD_SIGNIN> CreateSD_SIGNIN(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t session_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> password = 0) {
  SD_SIGNINBuilder builder_(_fbb);
  builder_.add_session_id(session_id);
  builder_.add_password(password);
  builder_.add_id(id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SD_SIGNIN> CreateSD_SIGNINDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t session_id = 0,
    const char *id = nullptr,
    const char *password = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto password__ = password ? _fbb.CreateString(password) : 0;
  return CreateSD_SIGNIN(
      _fbb,
      session_id,
      id__,
      password__);
}

struct D_SIGNIN FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef D_SIGNINBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DB_ID = 4,
    VT_SESSION_ID = 6,
    VT_OK = 8
  };
  uint64_t db_id() const {
    return GetField<uint64_t>(VT_DB_ID, 0);
  }
  uint64_t session_id() const {
    return GetField<uint64_t>(VT_SESSION_ID, 0);
  }
  SignInError ok() const {
    return static_cast<SignInError>(GetField<uint8_t>(VT_OK, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_DB_ID, 8) &&
           VerifyField<uint64_t>(verifier, VT_SESSION_ID, 8) &&
           VerifyField<uint8_t>(verifier, VT_OK, 1) &&
           verifier.EndTable();
  }
};

struct D_SIGNINBuilder {
  typedef D_SIGNIN Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_db_id(uint64_t db_id) {
    fbb_.AddElement<uint64_t>(D_SIGNIN::VT_DB_ID, db_id, 0);
  }
  void add_session_id(uint64_t session_id) {
    fbb_.AddElement<uint64_t>(D_SIGNIN::VT_SESSION_ID, session_id, 0);
  }
  void add_ok(SignInError ok) {
    fbb_.AddElement<uint8_t>(D_SIGNIN::VT_OK, static_cast<uint8_t>(ok), 0);
  }
  explicit D_SIGNINBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<D_SIGNIN> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<D_SIGNIN>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<D_SIGNIN> CreateD_SIGNIN(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t db_id = 0,
    uint64_t session_id = 0,
    SignInError ok = SignInError_SUCCESS) {
  D_SIGNINBuilder builder_(_fbb);
  builder_.add_session_id(session_id);
  builder_.add_db_id(db_id);
  builder_.add_ok(ok);
  return builder_.Finish();
}

struct SC_SIGNIN FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SC_SIGNINBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OK = 4
  };
  SignInError ok() const {
    return static_cast<SignInError>(GetField<uint8_t>(VT_OK, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_OK, 1) &&
           verifier.EndTable();
  }
};

struct SC_SIGNINBuilder {
  typedef SC_SIGNIN Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_ok(SignInError ok) {
    fbb_.AddElement<uint8_t>(SC_SIGNIN::VT_OK, static_cast<uint8_t>(ok), 0);
  }
  explicit SC_SIGNINBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SC_SIGNIN> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SC_SIGNIN>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SC_SIGNIN> CreateSC_SIGNIN(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    SignInError ok = SignInError_SUCCESS) {
  SC_SIGNINBuilder builder_(_fbb);
  builder_.add_ok(ok);
  return builder_.Finish();
}

#endif  // FLATBUFFERS_GENERATED_LOGIN_H_
