// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CHAT_H_
#define FLATBUFFERS_GENERATED_CHAT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 12 &&
              FLATBUFFERS_VERSION_REVISION == 23,
             "Non-compatible flatbuffers version included");

#include "InGame_generated.h"

struct C_CHAT;
struct C_CHATBuilder;

struct SC_CHAT;
struct SC_CHATBuilder;

struct C_CHAT FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C_CHATBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TEXT = 4
  };
  const ::flatbuffers::String *text() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TEXT);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TEXT) &&
           verifier.VerifyString(text()) &&
           verifier.EndTable();
  }
};

struct C_CHATBuilder {
  typedef C_CHAT Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_text(::flatbuffers::Offset<::flatbuffers::String> text) {
    fbb_.AddOffset(C_CHAT::VT_TEXT, text);
  }
  explicit C_CHATBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C_CHAT> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C_CHAT>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C_CHAT> CreateC_CHAT(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> text = 0) {
  C_CHATBuilder builder_(_fbb);
  builder_.add_text(text);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<C_CHAT> CreateC_CHATDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *text = nullptr) {
  auto text__ = text ? _fbb.CreateString(text) : 0;
  return CreateC_CHAT(
      _fbb,
      text__);
}

struct SC_CHAT FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SC_CHATBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLAYER = 4,
    VT_TEXT = 6
  };
  const ObjectInfo *player() const {
    return GetPointer<const ObjectInfo *>(VT_PLAYER);
  }
  const ::flatbuffers::String *text() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TEXT);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PLAYER) &&
           verifier.VerifyTable(player()) &&
           VerifyOffset(verifier, VT_TEXT) &&
           verifier.VerifyString(text()) &&
           verifier.EndTable();
  }
};

struct SC_CHATBuilder {
  typedef SC_CHAT Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_player(::flatbuffers::Offset<ObjectInfo> player) {
    fbb_.AddOffset(SC_CHAT::VT_PLAYER, player);
  }
  void add_text(::flatbuffers::Offset<::flatbuffers::String> text) {
    fbb_.AddOffset(SC_CHAT::VT_TEXT, text);
  }
  explicit SC_CHATBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SC_CHAT> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SC_CHAT>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SC_CHAT> CreateSC_CHAT(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<ObjectInfo> player = 0,
    ::flatbuffers::Offset<::flatbuffers::String> text = 0) {
  SC_CHATBuilder builder_(_fbb);
  builder_.add_text(text);
  builder_.add_player(player);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SC_CHAT> CreateSC_CHATDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<ObjectInfo> player = 0,
    const char *text = nullptr) {
  auto text__ = text ? _fbb.CreateString(text) : 0;
  return CreateSC_CHAT(
      _fbb,
      player,
      text__);
}

#endif  // FLATBUFFERS_GENERATED_CHAT_H_
