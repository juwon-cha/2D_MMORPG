// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PROTOCOL_H_
#define FLATBUFFERS_GENERATED_PROTOCOL_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 12 &&
              FLATBUFFERS_VERSION_REVISION == 23,
             "Non-compatible flatbuffers version included");

#include "Chat_generated.h"
#include "InGame_generated.h"

enum PacketType : uint8_t {
  PacketType_NONE = 0,
  PacketType_SC_ENTER_GAME = 1,
  PacketType_SC_LEAVE_GAME = 2,
  PacketType_SC_SPAWN = 3,
  PacketType_SC_DESPAWN = 4,
  PacketType_C_MOVE = 5,
  PacketType_SC_MOVE = 6,
  PacketType_C_CHAT = 7,
  PacketType_SC_CHAT = 8,
  PacketType_C_SKILL = 9,
  PacketType_SC_SKILL = 10,
  PacketType_MIN = PacketType_NONE,
  PacketType_MAX = PacketType_SC_SKILL
};

inline const PacketType (&EnumValuesPacketType())[11] {
  static const PacketType values[] = {
    PacketType_NONE,
    PacketType_SC_ENTER_GAME,
    PacketType_SC_LEAVE_GAME,
    PacketType_SC_SPAWN,
    PacketType_SC_DESPAWN,
    PacketType_C_MOVE,
    PacketType_SC_MOVE,
    PacketType_C_CHAT,
    PacketType_SC_CHAT,
    PacketType_C_SKILL,
    PacketType_SC_SKILL
  };
  return values;
}

inline const char * const *EnumNamesPacketType() {
  static const char * const names[12] = {
    "NONE",
    "SC_ENTER_GAME",
    "SC_LEAVE_GAME",
    "SC_SPAWN",
    "SC_DESPAWN",
    "C_MOVE",
    "SC_MOVE",
    "C_CHAT",
    "SC_CHAT",
    "C_SKILL",
    "SC_SKILL",
    nullptr
  };
  return names;
}

inline const char *EnumNamePacketType(PacketType e) {
  if (::flatbuffers::IsOutRange(e, PacketType_NONE, PacketType_SC_SKILL)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesPacketType()[index];
}

template<typename T> struct PacketTypeTraits {
  static const PacketType enum_value = PacketType_NONE;
};

template<> struct PacketTypeTraits<SC_ENTER_GAME> {
  static const PacketType enum_value = PacketType_SC_ENTER_GAME;
};

template<> struct PacketTypeTraits<SC_LEAVE_GAME> {
  static const PacketType enum_value = PacketType_SC_LEAVE_GAME;
};

template<> struct PacketTypeTraits<SC_SPAWN> {
  static const PacketType enum_value = PacketType_SC_SPAWN;
};

template<> struct PacketTypeTraits<SC_DESPAWN> {
  static const PacketType enum_value = PacketType_SC_DESPAWN;
};

template<> struct PacketTypeTraits<C_MOVE> {
  static const PacketType enum_value = PacketType_C_MOVE;
};

template<> struct PacketTypeTraits<SC_MOVE> {
  static const PacketType enum_value = PacketType_SC_MOVE;
};

template<> struct PacketTypeTraits<C_CHAT> {
  static const PacketType enum_value = PacketType_C_CHAT;
};

template<> struct PacketTypeTraits<SC_CHAT> {
  static const PacketType enum_value = PacketType_SC_CHAT;
};

template<> struct PacketTypeTraits<C_SKILL> {
  static const PacketType enum_value = PacketType_C_SKILL;
};

template<> struct PacketTypeTraits<SC_SKILL> {
  static const PacketType enum_value = PacketType_SC_SKILL;
};

bool VerifyPacketType(::flatbuffers::Verifier &verifier, const void *obj, PacketType type);
bool VerifyPacketTypeVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

inline bool VerifyPacketType(::flatbuffers::Verifier &verifier, const void *obj, PacketType type) {
  switch (type) {
    case PacketType_NONE: {
      return true;
    }
    case PacketType_SC_ENTER_GAME: {
      auto ptr = reinterpret_cast<const SC_ENTER_GAME *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PacketType_SC_LEAVE_GAME: {
      auto ptr = reinterpret_cast<const SC_LEAVE_GAME *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PacketType_SC_SPAWN: {
      auto ptr = reinterpret_cast<const SC_SPAWN *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PacketType_SC_DESPAWN: {
      auto ptr = reinterpret_cast<const SC_DESPAWN *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PacketType_C_MOVE: {
      auto ptr = reinterpret_cast<const C_MOVE *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PacketType_SC_MOVE: {
      auto ptr = reinterpret_cast<const SC_MOVE *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PacketType_C_CHAT: {
      auto ptr = reinterpret_cast<const C_CHAT *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PacketType_SC_CHAT: {
      auto ptr = reinterpret_cast<const SC_CHAT *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PacketType_C_SKILL: {
      auto ptr = reinterpret_cast<const C_SKILL *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PacketType_SC_SKILL: {
      auto ptr = reinterpret_cast<const SC_SKILL *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyPacketTypeVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyPacketType(
        verifier,  values->Get(i), types->GetEnum<PacketType>(i))) {
      return false;
    }
  }
  return true;
}

#endif  // FLATBUFFERS_GENERATED_PROTOCOL_H_
