// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TEST_H_
#define FLATBUFFERS_GENERATED_TEST_H_

#include "../Libraries/flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 12 &&
              FLATBUFFERS_VERSION_REVISION == 23,
             "Non-compatible flatbuffers version included");

struct C_Test;
struct C_TestBuilder;

struct SD_Test;
struct SD_TestBuilder;

struct D_Test;
struct D_TestBuilder;

struct SC_Test;
struct SC_TestBuilder;

struct C_Test FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C_TestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TEST_C = 4
  };
  int32_t test_c() const {
    return GetField<int32_t>(VT_TEST_C, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_TEST_C, 4) &&
           verifier.EndTable();
  }
};

struct C_TestBuilder {
  typedef C_Test Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_test_c(int32_t test_c) {
    fbb_.AddElement<int32_t>(C_Test::VT_TEST_C, test_c, 0);
  }
  explicit C_TestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C_Test> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C_Test>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C_Test> CreateC_Test(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t test_c = 0) {
  C_TestBuilder builder_(_fbb);
  builder_.add_test_c(test_c);
  return builder_.Finish();
}

struct SD_Test FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SD_TestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TEST_SD = 4
  };
  int32_t test_sd() const {
    return GetField<int32_t>(VT_TEST_SD, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_TEST_SD, 4) &&
           verifier.EndTable();
  }
};

struct SD_TestBuilder {
  typedef SD_Test Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_test_sd(int32_t test_sd) {
    fbb_.AddElement<int32_t>(SD_Test::VT_TEST_SD, test_sd, 0);
  }
  explicit SD_TestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SD_Test> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SD_Test>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SD_Test> CreateSD_Test(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t test_sd = 0) {
  SD_TestBuilder builder_(_fbb);
  builder_.add_test_sd(test_sd);
  return builder_.Finish();
}

struct D_Test FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef D_TestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TEST_D = 4
  };
  int32_t test_d() const {
    return GetField<int32_t>(VT_TEST_D, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_TEST_D, 4) &&
           verifier.EndTable();
  }
};

struct D_TestBuilder {
  typedef D_Test Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_test_d(int32_t test_d) {
    fbb_.AddElement<int32_t>(D_Test::VT_TEST_D, test_d, 0);
  }
  explicit D_TestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<D_Test> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<D_Test>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<D_Test> CreateD_Test(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t test_d = 0) {
  D_TestBuilder builder_(_fbb);
  builder_.add_test_d(test_d);
  return builder_.Finish();
}

struct SC_Test FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SC_TestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TEST_SC = 4
  };
  int32_t test_sc() const {
    return GetField<int32_t>(VT_TEST_SC, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_TEST_SC, 4) &&
           verifier.EndTable();
  }
};

struct SC_TestBuilder {
  typedef SC_Test Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_test_sc(int32_t test_sc) {
    fbb_.AddElement<int32_t>(SC_Test::VT_TEST_SC, test_sc, 0);
  }
  explicit SC_TestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SC_Test> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SC_Test>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SC_Test> CreateSC_Test(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t test_sc = 0) {
  SC_TestBuilder builder_(_fbb);
  builder_.add_test_sc(test_sc);
  return builder_.Finish();
}

#endif  // FLATBUFFERS_GENERATED_TEST_H_
