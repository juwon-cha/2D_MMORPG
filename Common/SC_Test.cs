// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SC_Test : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_12_23(); }
  public static SC_Test GetRootAsSC_Test(ByteBuffer _bb) { return GetRootAsSC_Test(_bb, new SC_Test()); }
  public static SC_Test GetRootAsSC_Test(ByteBuffer _bb, SC_Test obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SC_Test __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int TestSc { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<SC_Test> CreateSC_Test(FlatBufferBuilder builder,
      int test_sc = 0) {
    builder.StartTable(1);
    SC_Test.AddTestSc(builder, test_sc);
    return SC_Test.EndSC_Test(builder);
  }

  public static void StartSC_Test(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddTestSc(FlatBufferBuilder builder, int testSc) { builder.AddInt(0, testSc, 0); }
  public static Offset<SC_Test> EndSC_Test(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SC_Test>(o);
  }
}


static public class SC_TestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*TestSc*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
