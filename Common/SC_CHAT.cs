// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SC_CHAT : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_12_23(); }
  public static SC_CHAT GetRootAsSC_CHAT(ByteBuffer _bb) { return GetRootAsSC_CHAT(_bb, new SC_CHAT()); }
  public static SC_CHAT GetRootAsSC_CHAT(ByteBuffer _bb, SC_CHAT obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SC_CHAT __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public PlayerInfo? Player { get { int o = __p.__offset(4); return o != 0 ? (PlayerInfo?)(new PlayerInfo()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public string Text { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTextBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTextBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTextArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<SC_CHAT> CreateSC_CHAT(FlatBufferBuilder builder,
      Offset<PlayerInfo> playerOffset = default(Offset<PlayerInfo>),
      StringOffset textOffset = default(StringOffset)) {
    builder.StartTable(2);
    SC_CHAT.AddText(builder, textOffset);
    SC_CHAT.AddPlayer(builder, playerOffset);
    return SC_CHAT.EndSC_CHAT(builder);
  }

  public static void StartSC_CHAT(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddPlayer(FlatBufferBuilder builder, Offset<PlayerInfo> playerOffset) { builder.AddOffset(0, playerOffset.Value, 0); }
  public static void AddText(FlatBufferBuilder builder, StringOffset textOffset) { builder.AddOffset(1, textOffset.Value, 0); }
  public static Offset<SC_CHAT> EndSC_CHAT(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SC_CHAT>(o);
  }
}


static public class SC_CHATVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyTable(tablePos, 4 /*Player*/, PlayerInfoVerify.Verify, false)
      && verifier.VerifyString(tablePos, 6 /*Text*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
