// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SC_DESPAWN : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_12_23(); }
  public static SC_DESPAWN GetRootAsSC_DESPAWN(ByteBuffer _bb) { return GetRootAsSC_DESPAWN(_bb, new SC_DESPAWN()); }
  public static SC_DESPAWN GetRootAsSC_DESPAWN(ByteBuffer _bb, SC_DESPAWN obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SC_DESPAWN __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int PlayerIds(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PlayerIdsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetPlayerIdsBytes() { return __p.__vector_as_span<int>(4, 4); }
#else
  public ArraySegment<byte>? GetPlayerIdsBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public int[] GetPlayerIdsArray() { return __p.__vector_as_array<int>(4); }

  public static Offset<SC_DESPAWN> CreateSC_DESPAWN(FlatBufferBuilder builder,
      VectorOffset playerIdsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    SC_DESPAWN.AddPlayerIds(builder, playerIdsOffset);
    return SC_DESPAWN.EndSC_DESPAWN(builder);
  }

  public static void StartSC_DESPAWN(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddPlayerIds(FlatBufferBuilder builder, VectorOffset playerIdsOffset) { builder.AddOffset(0, playerIdsOffset.Value, 0); }
  public static VectorOffset CreatePlayerIdsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePlayerIdsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePlayerIdsVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePlayerIdsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPlayerIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<SC_DESPAWN> EndSC_DESPAWN(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SC_DESPAWN>(o);
  }
}


static public class SC_DESPAWNVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfData(tablePos, 4 /*PlayerIds*/, 4 /*int*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
