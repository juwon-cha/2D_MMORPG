// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SC_MOVE : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_12_23(); }
  public static SC_MOVE GetRootAsSC_MOVE(ByteBuffer _bb) { return GetRootAsSC_MOVE(_bb, new SC_MOVE()); }
  public static SC_MOVE GetRootAsSC_MOVE(ByteBuffer _bb, SC_MOVE obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SC_MOVE __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int PlayerId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public PositionInfo? PosInfo { get { int o = __p.__offset(6); return o != 0 ? (PositionInfo?)(new PositionInfo()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<SC_MOVE> CreateSC_MOVE(FlatBufferBuilder builder,
      int playerId = 0,
      Offset<PositionInfo> posInfoOffset = default(Offset<PositionInfo>)) {
    builder.StartTable(2);
    SC_MOVE.AddPosInfo(builder, posInfoOffset);
    SC_MOVE.AddPlayerId(builder, playerId);
    return SC_MOVE.EndSC_MOVE(builder);
  }

  public static void StartSC_MOVE(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddPlayerId(FlatBufferBuilder builder, int playerId) { builder.AddInt(0, playerId, 0); }
  public static void AddPosInfo(FlatBufferBuilder builder, Offset<PositionInfo> posInfoOffset) { builder.AddOffset(1, posInfoOffset.Value, 0); }
  public static Offset<SC_MOVE> EndSC_MOVE(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SC_MOVE>(o);
  }
}


static public class SC_MOVEVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*PlayerId*/, 4 /*int*/, 4, false)
      && verifier.VerifyTable(tablePos, 6 /*PosInfo*/, PositionInfoVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
